//////
//
// BREAKPOINTS
//
// Description: Breakpoint viewport sizes and media queries. Inspired by Twitter Bootstrap v4
// Version:     2017-10-28
// Author:      Erik Joling <erik@ejoweb.nl>
//
// Use:
//    @include breakpoint(md) {
//        [...]
//    }
//    @include breakpoint-down(md) {
//        [...]
//    }
//    @include breakpoint-only(md) {
//        [...]
//    }
//    @include breakpoint-between(md, lg) {
//        [...]
//    }
//
//////

// 
// DEFAULTS
//
$breakpoints: (
    xs:  0,
    sm:  480px,
    md:  720px,
    lg:  960px,
    xl:  1200px,
) !default;


// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 544px, md: 768px)
//
// The map defined in the `$breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $breakpoints) {
    $breakpoint-names: map-keys($breakpoints);
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
//    544px
@function breakpoint-min($name, $breakpoints: $breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))
//    767px
@function breakpoint-max($name, $breakpoints: $breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint($name, $breakpoints: $breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin breakpoint-down($name, $breakpoints: $breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin breakpoint-only($name, $breakpoints: $breakpoints) {
    @include breakpoint($name, $breakpoints) {
        @include breakpoint-down($name, $breakpoints) {
            @content;
        }
    }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin breakpoint-between($lower, $upper, $breakpoints: $breakpoints) {
    @include breakpoint($lower, $breakpoints) {
        @include breakpoint-down($upper, $breakpoints) {
            @content;
        }
    }
}

// Custom Breakpoint
@mixin breakpoint-custom($min-width) {
   @media (min-width: $min-width) {
      @content;
    }
}